{
  "id": 1754,
  "name": "Copy of BrickWall",
  "fragment": "/**\n* Example Fragment Shader\n* Sets the color and alpha of the pixel by setting gl_FragColor\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// A uniform unique to this shader. You can modify it to the using the form\n// below the shader preview. Any uniform you add is automatically given a form\nuniform vec3 lightPosition;\n\n// Example varyings passed from the vertex shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\nuniform vec3 BrickColor;\nuniform vec3 MortarColor;\nuniform vec2 BrickSize;\nuniform vec2 BrickPct;\nuniform sampler2D textureMap;\nvarying float LightIntensity;\nvarying vec2 MCposition;\n\nvoid main() {\n\n    \n    vec3 color;\n    vec2 position,useBrick;\n    \n    \n    position = MCposition/BrickSize;\n    \n    if(floor(mod(position.y,2.)) > 0.){\n        position.x += 0.5 + fract(time);\n    }\n    else{\n        position.x -= 0.5 + fract(time);\n    }\n    \n    position = fract(position);\n    \n    vec4 noiseTex= texture2D(textureMap,position);\n    \n    useBrick = step(position,BrickPct);\n    \n    \n    color = mix(MortarColor,BrickColor,useBrick.x * useBrick.y);\n    \n    color *= LightIntensity;\n    \n    gl_FragColor =  noiseTex*0.6 + vec4(color,1.0);\n\n}",
  "vertex": "/**\n* Example Vertex Shader\n* Sets the position of the vertex by setting gl_Position\n*/\n\n// Set the precision for data types used in this shader\nprecision highp float;\nprecision highp int;\n\n// Default THREE.js uniforms available to both fragment and vertex shader\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\n\n// Default uniforms provided by ShaderFrog.\nuniform vec3 cameraPosition;\nuniform float time;\n\n// Default attributes provided by THREE.js. Attributes are only available in the\n// vertex shader. You can pass them to the fragment shader using varyings\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n\n// Examples of variables passed from vertex to fragment shader\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\n\n\nuniform vec3 lightPosition;\nvarying float LightIntensity;\nvarying vec2 MCposition;\n\nvoid main() {\n\n    vNormal = normal;\n    vUv = uv;\n    vUv2 = uv2;\n    vPosition = position;\n    \n    vec3 ecPosition = vec3(modelViewMatrix * vec4(position,1.0)).xyz;\n    vec3 tnorm = normalize(normalMatrix * normal);\n    vec3 lightVec = normalize(lightPosition - ecPosition);\n    vec3 reflectVec = reflect(-lightVec,tnorm);\n    vec3 viewVec = normalize(-ecPosition);\n    float spec = 0.0;\n    float diffuse = max(0.0,dot(lightVec,tnorm));\n    if(diffuse > 0.0)\n    {\n        spec = max(0.0,dot(reflectVec,viewVec));\n        spec = pow(spec,16.0);\n    }\n    \n    LightIntensity = 1.0 * diffuse + 0.7 * spec;\n    \n    MCposition = uv.xy;\n    \n    \n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n}",
  "uniforms": {
    "cameraPosition": {
      "name": "cameraPosition",
      "type": "v3",
      "glslType": "vec3",
      "useGridHelper": false,
      "description": ""
    },
    "time": {
      "type": "f",
      "glslType": "float",
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "lightPosition": {
      "type": "v3",
      "glslType": "vec3",
      "value": {
        "x": 0,
        "y": 0,
        "z": 4
      },
      "description": "",
      "textureId": null,
      "runtime": {
        "texture": null
      }
    },
    "BrickColor": {
      "type": "c",
      "glslType": "vec3",
      "value": {
        "r": 1,
        "g": 0.3,
        "b": 0.2
      }
    },
    "BrickSize": {
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 0.3,
        "y": 0.15
      }
    },
    "BrickPct": {
      "type": "v2",
      "glslType": "vec2",
      "value": {
        "x": 0.9,
        "y": 0.85
      }
    },
    "MortarColor": {
      "type": "c",
      "glslType": "vec3",
      "value": {
        "r": 0.85,
        "g": 0.85,
        "b": 0.85
      }
    },
    "textureMap": {
      "type": "t",
      "glslType": "sampler2D",
      "description": "",
      "textureId": null
    }
  }
}